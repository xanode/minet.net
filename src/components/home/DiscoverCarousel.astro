---
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import DiscoverCard from "@components/home/DiscoverCard.astro";
import TimelineCard from "@components/home/TimelineCard.astro";

import EquipeReference from "@assets/fun_1.jpg";
import ServeursReference from "@assets/background.jpg";
import SoireeReference from "@assets/soir√©e_1.jpg";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<discover-carousel>
    <div class="flex flex-col lg:flex-row items-center justify-between gap-2 text-2xl md:text-3xl text-white/50 mt-20">
        <button class="hover:text-white/70 aria-current:text-white" data-target="0" aria-current="page">
            {t('index.discover.link0')}
        </button>
        <span class="hidden lg:flex grow shrink h-[1px] bg-gradient-to-r from-white/10 via-white/50 to-white/10"></span>
        <button class="hover:text-white/70 aria-current:text-white" data-target="1">
            {t('index.discover.link1')}
        </button>
        <span class="hidden lg:flex grow shrink h-[1px] bg-gradient-to-r from-white/10 via-white/50 to-white/10"></span>
        <button class="hover:text-white/70 aria-current:text-white" data-target="2">
            {t('index.discover.link2')}
        </button>
    </div>
    <DiscoverCard name="0" image={ServeursReference} color1="bg-zinc-800" color2="bg-neutral-800" color3="bg-stone-800">
        <TimelineCard title={t('index.discover.card0.timeline0.title') as string} icon="autres-services">
            {t('index.discover.card0.timeline0.content')}
        </TimelineCard>
        <TimelineCard title={t('index.discover.card0.timeline1.title') as string} icon="wi-fi">
            {t('index.discover.card0.timeline1.content')}
        </TimelineCard>
        <TimelineCard title={t('index.discover.card0.timeline2.title') as string} icon="autres-services">
            {t('index.discover.card0.timeline2.content')}
        </TimelineCard>
    </DiscoverCard>
    <DiscoverCard name="1" image={SoireeReference} color1="bg-violet-800" color2="bg-purple-800" color3="bg-fuchsia-800">
        <TimelineCard title={t('index.discover.card1.timeline0.title') as string} icon="autres-services">
            {t('index.discover.card1.timeline0.content')}
        </TimelineCard>
        <TimelineCard title={t('index.discover.card1.timeline1.title') as string} icon="wi-fi">
            {t('index.discover.card1.timeline1.content')}
        </TimelineCard>
        <TimelineCard title={t('index.discover.card1.timeline2.title') as string} icon="autres-services">
            {t('index.discover.card1.timeline2.content')}
        </TimelineCard>
    </DiscoverCard>
    <DiscoverCard name="2" image={EquipeReference} color1="bg-cyan-800" color2="bg-sky-800" color3="bg-blue-800">
        <TimelineCard title={t('index.discover.card2.timeline0.title') as string} icon="autres-services">
            {t('index.discover.card2.timeline0.content')}
        </TimelineCard>
        <TimelineCard title={t('index.discover.card2.timeline1.title') as string} icon="wi-fi">
            {t('index.discover.card2.timeline1.content')}
        </TimelineCard>
        <TimelineCard title={t('index.discover.card2.timeline2.title') as string} icon="autres-services">
            {t('index.discover.card2.timeline2.content')}
        </TimelineCard>
    </DiscoverCard>
</discover-carousel>

<script>
    type Selector = {
        button: HTMLButtonElement;
        card: HTMLDivElement;
    }

    class DiscoverCarousel extends HTMLElement {
        selectors: Array<Selector>;

        constructor() {
            super();

            // Both buttons and cards has the same data-name attribute
            // So we can use it to link them together
            // We query the button and cards that has the same data-name
            // then we store them in an array
            this.selectors = Array.from(this.querySelectorAll("button")).map((button) => {
                const name = button.dataset.target;
                const card = this.querySelector(`[data-name="${name}"]`)! as HTMLDivElement;

                return {button: button, card: card};
            });
        }

        connectedCallback() {
            // We set the first button as selected and the others as not selected
            this.selectors.forEach((selector, index) => {
                //selector.button.setAttribute("aria-selected", index === 0 ? "true" : "false");
                selector.card.setAttribute("aria-hidden", index === 0 ? "false" : "true");
            });

            // We add a click event listener on each button
            this.selectors.forEach((selector) => {
                selector.button.addEventListener("click", () => {
                    this.handleClick(selector);
                });
            });

        }

        handleClick(selector: Selector) {
            // We set the clicked button as selected and the others as not selected
            this.selectors.forEach((selector) => {
                selector.button.removeAttribute("aria-current");
                selector.card.setAttribute("aria-hidden", "true");
            });

            selector.button.setAttribute("aria-current", "page");
            selector.card.setAttribute("aria-hidden", "false");
        }
    }

    customElements.define("discover-carousel", DiscoverCarousel);
</script>