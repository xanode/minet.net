---
interface Props {
    class: string;
    href: string;
    rounded: 'none' | 'sm' | 'md' | 'lg' | 'full';
    underline?: boolean;
}
const { class: className, href, rounded, underline = true } = Astro.props as Props;

const roundedClasses = {
    none: '',
    sm: 'rounded-sm',
    md: 'rounded-md',
    lg: 'rounded-lg',
    full: 'rounded-full',
};
const roundedClass = roundedClasses[rounded];
---

<a is="button-action" class=`group z-0 ${className} ${roundedClass}` href={href} target="_blank">
    <div class=`-z-10 bg-auto bg-gradient-radial will-change-background-opacity block absolute inset-0 transition-opacity ${roundedClass}` style="--circle-radius: 2.5em;"></div>
    <div class=`-z-10 bg-sky-500 group-hover:bg-neutral-900 transition-colors backface-hidden opacity-95 block absolute inset-0 ${roundedClass} m-[1px]`></div>
    <div class=`relative ${underline && 'after:absolute after:-bottom-1 after:left-0 after:w-[calc(100%-1.5em)] after:h-0.5 after:pointer-events-none after:content-empty after:bg-current after:scale-x-0 after:group-hover:scale-x-100 after:origin-0 after:transition-transform after:duration-300'}`>
        <slot />
        <svg class="w-4 h-4 inline-block !visible align-text-bottom fill-current transition-transform duration-200 translate-x-0 group-hover:translate-x-1" viewBox="0 0 16 16" fill="none">
            <path fill="currentColor" d="M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z"></path>
            <path class="transition-stroke-dashoffset duration-200 fill-current [stroke-dashoffset:10] group-hover:[stroke-dashoffset:20]" stroke-dasharray="10" stroke="currentColor" d="M1.75 8H11" stroke-width="1.5" stroke-linecap="round"></path>
        </svg>
    </div>
</a>

<script>
    // Helper function to debounce a function call
    function debounce(func: Function, delay: number) {
        let timeoutId: number;
        return function (this: any, ...args: any[]) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }

    class ButtonAction extends HTMLAnchorElement {
        rect: DOMRect;
        radialGradient: HTMLDivElement | null;
        viaPercent: number = 0;

        constructor() {
            super();

            this.rect = this.getBoundingClientRect();

            this.radialGradient = this.querySelector("div"); // Representing the first div element in the sub tree so this is the good one

            this.addEventListener("mousemove", this.handleMouseHover.bind(this));
            this.addEventListener("mouseenter", this.handleMouseEnter.bind(this));
            this.addEventListener("mouseleave", this.handleMouseLeave.bind(this));

            // Debounce the handleMouseHover function with a delay of 50ms
            this.handleMouseHover = debounce(this.handleMouseHover, 50);
        }

        handleMouseHover(event: MouseEvent) {
            this.style.setProperty("--y", `${(event.clientY - this.rect.top)}px`);
            this.style.setProperty("--x", `${(event.clientX - this.rect.left)}px`);
        }

        handleMouseEnter() {
            this.radialGradient!.style.setProperty("--circle-radius", "2.5em");
        }

        handleMouseLeave() {
            this.radialGradient!.style.setProperty("--circle-radius", "0em");
        }
    }

    customElements.define("button-action", ButtonAction, { extends: "a" });
</script>