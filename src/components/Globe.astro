---
---

<canvas is="minet-globe" class="absolute w-full h-full cursor-grab opacity-0 transition-opacity duration-1000"></canvas>

<script>
    import type Phenomenon from 'phenomenon';
    import createGlobe from "cobe";

    class Globe extends HTMLCanvasElement {
        globe!: Phenomenon;
        phi: number = 0;
        pointerInteracting: number | null = null;
        pointerInteractionMovement: number = 0;

        constructor() {
            super();
        }

        connectedCallback() {
            this.globe = createGlobe(this, {
                devicePixelRatio: 2,
                width: this.offsetWidth * 2,
                height: this.offsetWidth * 2,
                phi: 4,
                theta: 0.3,
                dark: 1,
                diffuse: 0.2,
                mapSamples: 16000,
                mapBrightness: 20,
                baseColor: [0.1, 0.1, 0.1],
                markerColor: [251/255, 100/255, 21/255],
                glowColor: [0.1, 0.1, 0.1],
                offset: [0, 0],
                markers: [
                    { location: [48.856614, 2.3522219], size: 0.03 }
                ],
                onRender: this.render,
            });
            setTimeout(() => this.style.opacity = '1');

            this.addEventListener('mousemove', this.handleMouseMove);
            this.addEventListener('pointerdown', this.handlePointerDown);
            this.addEventListener('pointerout', this.handlePointerOut);
            this.addEventListener('pointerup', this.handlePointerUp);
            this.addEventListener('touchmove', this.handleTouchMove);
        }

        handleMouseMove(event: MouseEvent) {
            if (this.pointerInteracting !== null) {
                const delta = event.clientX - this.pointerInteracting;
                this.pointerInteractionMovement = delta;
                this.phi = this.pointerInteractionMovement / 200;
            }
        }

        handlePointerDown(event: MouseEvent) {
            this.pointerInteracting = event.clientX - this.pointerInteractionMovement;
            this.style.cursor = 'grabbing';
        }

        handlePointerOut() {
            this.pointerInteracting = null;
            this.style.cursor = 'grab';
        }

        handlePointerUp() {
            this.pointerInteracting = null;
            this.style.cursor = 'grab';
        }

        handleTouchMove(event: TouchEvent) {
            if (this.pointerInteracting !== null && event.touches[0]) {
                const delta = event.touches[0].clientX - this.pointerInteracting;
                this.pointerInteractionMovement = delta;
                this.phi = this.pointerInteractionMovement / 100;
            }
        }

        render(state: any) {
            state.phi = this.phi;
            state.width = this.offsetWidth * 2;
            state.height = this.offsetWidth * 2;
            this.phi += 0.002;
        }

        disconnectedCallback() {
            this.globe.destroy();
        }
    }

    customElements.define('minet-globe', Globe, {extends: 'canvas'});
</script>