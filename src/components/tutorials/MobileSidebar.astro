---
import { getEntry } from "astro:content";
import SearchButton from "@components/tutorials/SearchButton.astro";
import TutorialsNav from "@components/tutorials/TutorialsNav.astro";
import type { CollectionEntry } from "astro:content";

interface Props {
    tutorial: CollectionEntry<"tutoriels">; // Selected tutorial
}
const { tutorial } = Astro.props;
const category = await getEntry(tutorial.data.category);
---

<div is="mobile-sidebar" class="xl:hidden fixed inset-x-0 bottom-0 flex items-center justify-center border-t border-neutral-800 px-4 py-3 bg-black max-w-screen">
    <button class="group flex grow justify-center gap-2.5 p-2 text-neutral-200 border rounded-lg border-neutral-800" aria-selected="false">
        <svg class="w-4 h-4 shrink-0 fill-none stroke-current text-current" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" viewBox="0 0 24 24"><path d="M15 10l5 5-5 5"></path><path d="M4 4v7a4 4 0 004 4h12"></path></svg>
        <span class="flex grow text-sm font-medium whitespace-nowrap text-ellipsis overflow-hidden">
            {category.data.name}
        </span>
        <span class="flex transition-transform group-aria-selected:rotate-180">
            <svg class="w-4 h-4 fill-none stroke-current text-current" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6"></path></svg>
        </span>
    </button>
    <div class="hidden aria-expanded:block fixed inset-x-0 bottom-[63px] px-4 py-3 border-t border-neutral-800 bg-black transition-all duration-500 max-w-screen max-h-4/5 overflow-y-auto" aria-expanded="false">
        <TutorialsNav tutorial={tutorial} />
        <SearchButton />
    </div>
</div>

<script>
    class MobileSidebar extends HTMLDivElement {
        button: HTMLButtonElement;
        nav: HTMLDivElement;
        isOpen: boolean = false;

        constructor() {
            super();

            this.button = this.querySelector<HTMLButtonElement>("button")!;
            this.nav = this.querySelector<HTMLDivElement>("div")!;
        }

        connectedCallback() {
            this.button.addEventListener("click", this.handleClick.bind(this));
        }

        handleClick() {
            this.isOpen = !this.isOpen;
            this.button.setAttribute("aria-selected", this.isOpen.toString());
            this.nav.setAttribute("aria-expanded", this.isOpen.toString());
        }

        disconnectedCallback() {
            this.button.removeEventListener("click", this.handleClick.bind(this));
        }
    }
    customElements.define("mobile-sidebar", MobileSidebar, { extends: "div" });
</script>