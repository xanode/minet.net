---
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import KBD from "@components/ui/KBD.astro";
import { ui, defaultLang } from "@i18n/ui";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const i18n = Object.keys(ui[lang]).filter((key) => key.startsWith('tutorials.search.modal.')).reduce((acc, key) => {
    acc[key] = t(key as keyof typeof ui[typeof defaultLang]) as string;
    return acc;
}, {} as Record<string, string>);
---

<div is="search-modal" class="relative z-50 opacity-0 transition-opacity duration-200" data-i18n={JSON.stringify(i18n)} data-lang={lang}>
    <div data-name="overlay" class="fixed inset-0 bg-black/80"></div>
    <div class="fixed top-1/5 inset-x-0 lg:left-1/2 lg:-translate-x-1/2 flex flex-col border rounded-lg border-neutral-700 bg-neutral-950 p-2 lg:w-160">
        <div class="flex items-center gap-2">
            <input class="text-xl text-neutral-400 placeholder:text-neutral-700 bg-transparent outline-none px-4 py-2 w-full" placeholder={t('tutorials.search.placeholder') as string} />
            <button class="text-neutral-500">
                <svg class="w-5 h-5 stroke-current text-current" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10"></circle><path d="M15 9l-6 6"></path><path d="M9 9l6 6"></path></svg>
            </button>
            <KBD size="text-xs" mobile>
                Esc
            </KBD>
        </div>
        <span class="w-full h-[1px] bg-neutral-700 mb-2 overflow-visible"></span>
        <div class="text-xs text-neutral-500 pl-2 py-2 mb-2 h-6 text-ellipsis overflow-hidden">
            <span data-name="subtitle"></span>
        </div>
        <div class="will-change-height transition-height overflow-y-auto overflow-x-hidden max-h-80">
            <ul class="flex flex-col gap-1"></ul>
        </div>
    </div>
</div>

<script>
    import lunr from 'lunr';
    import type { CollectionEntry } from 'astro:content';

    type Document = {
        title: CollectionEntry<'tutoriels'>['data']['title'];
        slug: CollectionEntry<'tutoriels'>['slug'];
        body: CollectionEntry<'tutoriels'>['body'];
    };

    class SearchModal extends HTMLDivElement {
        documents: any | null = null;
        index: lunr.Index | null = null;
        input: HTMLInputElement;
        overlay: HTMLDivElement;
        reset: HTMLButtonElement;
        resultList: HTMLUListElement
        subtitle: HTMLSpanElement;
        i18n: Record<string, string>;
        lang: string;

        constructor() {
            super();
            
            /** Get elements */
            this.input = this.querySelector('input') as HTMLInputElement;
            this.overlay = this.querySelector('[data-name="overlay"]') as HTMLDivElement;
            this.reset = this.querySelector('button') as HTMLButtonElement;
            this.resultList = this.querySelector('ul') as HTMLUListElement;
            this.subtitle = this.querySelector('[data-name="subtitle"]') as HTMLSpanElement;

            /** Get i18n */
            this.i18n = JSON.parse(this.dataset.i18n!);
            this.lang = this.dataset.lang!;
        }

        connectedCallback() {
            this.style.display = 'none';
            this.reset.style.display = 'none';
            this.subtitle.textContent = this.i18n['tutorials.search.modal.min-length'];

            /** Events that open the modal */
            document.addEventListener('search', this.openModal.bind(this));

            /** Event related to search */
            this.input.addEventListener('input', this.handleSearch.bind(this));
            this.reset.addEventListener('click', this.handleReset.bind(this));

            /** Events that close the modal */
            document.addEventListener('keydown', (event: KeyboardEvent) => {
                if (event.key === 'Escape') this.closeModal();
            });
            this.overlay.addEventListener('click', this.closeModal.bind(this));
        }

        openModal() {
            this.style.display = 'block';
            setTimeout(() => this.style.opacity = '1');
            this.loadSearch();
            this.input.focus();
        }

        async loadSearch() {
            if (this.index) return;

            // Update the subtitle to indicate that the search is loading
            this.subtitle.textContent = this.i18n['tutorials.search.modal.loading'];

            // Fetch the search.json data and initialize the lunr index
            const response = await fetch(`/${this.lang}/search.json`);
            this.documents = await response.json();

            const self = this;

            // Create the lunr index
            this.index = lunr(function () {
                // We assume that search.json is an array of objects with the attributes title, body and slug
                this.field('title');
                this.field('body');
                this.ref('slug');
                // Add documents to the index
                self.documents.forEach((doc: Document) => {
                    this.add(doc);
                }, this);
            });

            // Update the subtitle to indicate that searching can start
            this.subtitle.textContent = this.i18n['tutorials.search.modal.min-length'];
        }

        handleReset() {
            this.input.value = '';
            this.reset.style.display = 'none';
            this.subtitle.textContent = this.i18n['tutorials.search.modal.min-length'];
        }

        handleSearch() {
            if (!this.index) return;

            const query = this.input.value;

            // Reset the subtitle and results
            this.subtitle.textContent = '';
            this.reset.style.display = query.length > 0 ? 'block' : 'none';
            // Clear previous search results
            this.clearResults();

            if (query.length < 3) {
                this.subtitle.textContent = this.i18n['tutorials.search.modal.min-length'];
                return;
            }

            this.subtitle.textContent = this.i18n['tutorials.search.modal.searching'];

            // Perform the search and display results
            const searchResults = this.index.search(query);
            this.displayResults(searchResults);
        }

        clearResults() {
            // Clear the results list
            this.resultList.innerHTML = '';
        }

        displayResults(searchResults: lunr.Index.Result[]) {
            searchResults.forEach(result => {
                const doc: Document = this.documents.find((doc: Document) => doc.slug === result.ref);
                const [lang, ...slug] = doc.slug.split('/');
                if (doc) {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <a class="flex items-center text-sm px-4 rounded-lg hover:bg-neutral-900 whitespace-normal transition-colors h-18" href="/${lang}/tutoriels/${slug}/">
                            <div class="flex items-center">
                                <span class="flex items-center justify-center mr-3">
                                    <svg class="w-5 h-5 mt-[1px] fill-none text-neutral-400 stroke-current" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" viewBox="0 0 24 24"><path d="M2 3h6a4 4 0 014 4v14a3 3 0 00-3-3H2z"></path><path d="M22 3h-6a4 4 0 00-4 4v14a3 3 0 013-3h7z"></path></svg>
                                </span>
                                <span>
                                    <div class="text-base text-neutral-200 text-ellipsis line-clamp-1">
                                        ${doc.title}
                                    </div>
                                    <div class="my-2 pl-2 border-l-4 border-neutral-800 text-neutral-400 text-ellipsis line-clamp-1">
                                        ${doc.body}
                                    </div>
                                </span>
                            </div>
                        </a>
                    `;
                    // Update content in listItem using doc data
                    this.resultList.appendChild(listItem);
                }
            });
            this.subtitle.textContent = `${searchResults.length} ${this.i18n['tutorials.search.modal.results']}`;
        }

        closeModal() {
            this.style.display = 'none';
            this.style.opacity = '0';
        }
    }
    customElements.define('search-modal', SearchModal, { extends: 'div' });
</script>